#!/usr/bin/env python3
##
# @file dispatch-table-generator
# @brief Dispatch Table Generation
# @author Alexander Rothman <gnomesort@megate.ch>
# @date 2024
# @copyright AGPL-3.0-or-later
from megatech.vulkan.applications import DispatchTableGenerator

from argparse import ArgumentParser, Action, RawDescriptionHelpFormatter
from pathlib import Path

__version__ = DispatchTableGenerator.version

class ExtensionSetStoreAction(Action):
    def __init__(self, option_strings, dest, nargs=None, **kwargs):
        if nargs is not None:
            raise ValueError("Extension sets must be packed in a single string.")
        super().__init__(option_strings, dest, **kwargs)
    def __call__(self, parser, namespace, values, option_string=None):
        extensions = set()
        for value in values.split(","):
            if len(value) > 0:
                extensions.add(value.replace("\"", "").replace("\'", ""))
        if "all" in extensions:
            extensions = set([ "all" ])
        setattr(namespace, self.dest, extensions)

class CommaSeparatedListStoreAction(Action):
    def __init__(self, option_strings, dest, nargs=None, **kwargs):
        if nargs is not None:
            raise ValueError("Lists must be packed in a single string.")
        super().__init__(option_strings, dest, **kwargs)
    def __call__(self, parser, namespace, values, option_string=None):
        res = [ ]
        for value in values.split(","):
            if len(value) > 0:
                res.append(value.replace("\"", "").replace("\'", ""))
        setattr(namespace, self.dest, res)

class IndentedDescriptionFormatter(RawDescriptionHelpFormatter):
    def _fill_text(self, text, width, indent) -> str:
        import textwrap
        res = [ ]
        offset = ""
        for line in text.splitlines():
            offset = "    " * (len(line) - len(line.lstrip()))
            res.append(textwrap.fill(line.strip(), width, initial_indent=offset, subsequent_indent=offset))
        return "\n".join(res)

def main() -> None:
    progepilog = """
templates:
\tTemplates receive three parameters.
\targuments:
\t\tA list of strings containing any values passed to the \"--template-arguments\" option.
\tcommands:
\t\tA VulkanCommandSet containing VulkanCommand objects for every enabled command.
\tspecification:
\t\tA VulkanSpecification representing the parsed specification.
\tbuildtime:
\t\tA datetime object representing the build time in UTC.

notes:
\tIf a specification path is not explicitly provided, the application will search the following locations.
\tUnix-like systems:
\t\t$VULKAN_SDK/share/vulkan/registry/vk.xml
\t\t$HOME/.local/share/vulkan/registry/vk.xml
\t\t/usr/local/share/vulkan/registry/vk.xml
\t\t/usr/share/vulkan/registry/vk.xml
\tWindows systems:
\t\t%VULKAN_SDK%/share/vulkan/registry/vk.xml
\t\t%VULKAN_SDK_PATH%/share/vulkan/registry/vk.xml
"""
    parser = ArgumentParser(description="Generates Vulkan dispatch table objects from Mako templates.",
                            epilog=progepilog, formatter_class=IndentedDescriptionFormatter, add_help=False)
    parser.add_argument("-h", "--help", action="help", help="Display this help message and exit.")
    parser.add_argument("-v", "--version", action="version", version=f"%(prog)s {__version__}",
                        help="Display version information and exit.")
    parser.add_argument("-V", "--verbose", action="store_true", default=False, help="Display verbose output.")
    parser.add_argument("-o", "--output", type=Path, default=None,
                        help="A path to an output file. If you don't provide an output file, the application writes "
                             "to standard output.")
    parser.add_argument("--specification-path", type=Path,
                        help="Explicitly set the location of the desired Vulkan specification. When this option isn't "
                             "set, a set of standard paths are searched for the specification. See \"note\"s for more "
                             "details.", default=None)
    parser.add_argument("--api", type=str, default="vulkan",
                        help="The Vulkan API to enable. (e.g., \"vulkan\" or \"vulkansc\"). Defaults to \"vulkan\".")
    parser.add_argument("--api-version", type=str, default="latest",
                        help="The latest Vulkan API version (e.g., 1.0, 1.1, 1.2, etc.) to enable. "
                             "This may also be the special value \"latest\". All earlier API versions are included "
                             "with later API versions. This means that \"--api-version=1.2\" enables versions 1.1 and "
                             "1.0 as well. \"latest\", therefore, enables every API version. Defaults to \"latest\".")
    parser.add_argument("--extensions", action=ExtensionSetStoreAction, default=set([ "all" ]),
                        help="A comma separated list of Vulkan extensions to enable. This may also be the special "
                             "value \"all\" which, obviously, includes every extension in the specification. Even "
                             "when you enable an extension explicitly, it might still be disabled by the "
                             "specification. This can happen, for example, when no API supports the extension (i.e., "
                             "the supported API is explicitly listed as \"disabled\"), when the current API doesn't "
                             "support the extension, or when the extension is deprecated and "
                             "\"--no-enable-deprecated\" is specified. Defaults to \"all\".")
    parser.add_argument("-t", "--template-arguments", action=CommaSeparatedListStoreAction, default=[ ],
                        help="A comma separated list of arguments that will be passed through to the template.")
    parser.add_argument("--no-enable-deprecated", action="store_false", default=True,
                        help="Explicitly disable deprecated features.")
    parser.add_argument("INPUT", type=Path, help="A path to an input template file.")
    args = parser.parse_args()
    app = DispatchTableGenerator(args.INPUT, args.verbose, args.output, args.specification_path, args.api,
                                 args.api_version, args.extensions, args.template_arguments, args.no_enable_deprecated)
    app.run()

if __name__ == "__main__":
    main()

